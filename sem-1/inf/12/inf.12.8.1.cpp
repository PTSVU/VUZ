#include <iostream>     //библиотека для cin и cout
#include <iomanip>      //библиотека для setw
#include <signal.h>     //библиотека для обработки ctrl+c
using namespace std;    //автоматическое добавление std

void singintHandler(int sig_num)        //подпрограмма для обработки ctrl+c
{
    signal(SIGINT, singintHandler);
    fflush(stdout);
}

int main()      //главная функция программы
{
    setlocale(LC_ALL, "Russian");       //добавление поддержки русского языка
    signal(SIGINT, singintHandler);     //вызов подпрограммы для обработки ctrl+c
    srand(time(NULL));      //делает псевдо-рандомные числа зависимыми от времени
    int M, n, choice, * b, c = 0, p;        //объявление переменных

    do      //цикл ввода размера матрицы
    {
        cout << "Введите размер матрицы(2<=M<=5)= ";        //вывод текста
        cin >> M;       //ввод размера матрицы
        if (M < 2 or M > 5)     //условие неправильного ввода
        {
            cout << "Неправильный ввод" << endl << endl;        //вывод сообщения о неправильном вводе
            cin.clear();                    //отчистка неправильного ввода
            cin.ignore(2147483647, '\n');
        }
    } while (M < 2 or M > 5);       //условие продолжение цикла

    int** a = new int* [M];     //выделение массива для указания размера матрицы
    for (int i = 0; i < M; i++)     //перебор массива
    {
        a[i] = new int[M];      //привидение матрицы к выбраному нами размеру
    }

    do      //цикл выбора вариантов заполнения матрицы
    {
        cout << "Выбор варианта ввода:" << endl << "   1 - случайный" << endl << "   2 - ручной" << endl;       //вывод вариантов
        cin >> choice;      //ввод вариантов
        if (choice < 1 or choice > 2)       //условие неправильного ввода
        {
            cout << "Неправильный ввод" << endl << endl;        //вывод сообщения о неправильном вводе
            cin.clear();                    //отчистка неправильного ввода
            cin.ignore(2147483647, '\n');
        }
    } while (choice < 1 or choice > 2);     //условие продолжение цикла


    if (choice == 1)        //проверка на выбранный нами вариант
    {
        for (int i = 0; i < M; i++)     //перебор строчек матрицы
        {
            for (int j = 0; j < M; j++)     //перебор столбцов матрицы
            {
                a[i][j] = rand() % 100 + 1;     //заполнение элементов матрицы псевдо-рандомными числами
            }
        }
    }
    else if (choice == 2)       //проверка на выбранный нами вариант
    {
        for (int i = 0; i < M; i++)     //перебор строчек матрицы
        {
            cout << "Введите " << M << " натуральных элементов матрицы " << i + 1 << " строки: \n";     //вывод подсказки для ввода
            for (int j = 0; j < M; j++)    //перебор столбцов матрицы
            {
                do      //цикл ручного ввода матрицы
                {
                    cin >> a[i][j];     //ручной ввод элементов матрицы
                    if (a[i][j] < 1 or a[i][j] > 100)       //условие неправильного ввода
                    {
                        cout << "Неправильный ввод" << endl << endl;        //вывод сообщения о неправильном вводе
                        cin.clear();                        //отчистка неправильного ввода
                        cin.ignore(2147483647, '\n');       
                    }
                } while (a[i][j] < 1 or a[i][j] > 100);     //условие продолжение цикла
            }
        }
    }

    cout << "Матрица:\n";       //вывод текстового сообщения о выводе не отсортированной матрицы
    for (int i = 0; i < M; i++)     //перебор строчек матрицы
    {
        for (int j = 0; j < M; j++)     //перебор столбцов матрицы
        {
            cout << setw(4) << a[i][j] << " ";      //вывод не отсортированной матрицы
        }
        cout << "\n";       //разделение строчек матрицы при выводе
    }

    p = 0, n = (M * M + M) / 2;     //инцилизация переменных
    b = new int[n];     //объявление размера буфферной переменной необходимой для сортировки
    for (int i = 0; i < M; i++)     //перебор строчек матрицы
    {
        for (int j = 0; j < M; j++)     //перебор столбцов матрицы
        {
            if (i + j <= M - 1)     //условие внесения в буфферную переменную(под это условие подходит лишь числа лежащие на побочной линии или выше неё)
            {
                b[p++] = a[i][j];       //внесение элемента матрицы в буфферную переменую
            }
        }
    }

    for (int i = 0; i < n - 1; i++)     //перебор строчек матрицы
    {
        for (int j = 0; j < n - i - 1; j++)     //перебор столбцов матрицы
        {
            if (b[j] and b[j+1] != -842150451)      //условие сортировки 1
            {
                if (b[j] > b[j + 1])        //условие сортировки 2
                {
                    swap(b[j], b[j + 1]);       //сортировка буффера
                }
            }
        }
    }

    p = 0;      //инцилизация переменной для перебора буффера
    for (int i = 0; i < M; i++)     //перебор строчек матрицы
    {
        for (int j = 0; j < M; j++)     //перебор столбцов матрицы
        {
            if (i+j <= M-1)     //условие для определения элеменов побочной линии и элементов выше неё
            { 
                a[i][j] = b[p++];       //занесение отсортированных элементов буффера в матрицу
            }
            else
            {
                a[i][j] *= -1;      //умножение элементов лежащих ниже побочной линии(обусловленно заданием)
            }
        }
    }

    cout << "Отсортированная матрица:\n";       //вывод текстового сообщения о выводе не отсортированной матрицы 
    for (int i = 0; i < M; i++)     //перебор строчек матрицы
    {
        for (int j = 0; j < M; j++)     //перебор столбцов матрицы
        {
            cout << setw(4) << a[i][j] << " ";      //вывод элементов отсортированной матрицы 
        }
        cout << "\n";       //разделение строчек матрицы при выводе
    }
}