"""
Создать txt-файл, вставить туда любую англоязычную статью из Википедии.
Реализовать одну функцию, которая выполняет следующие операции:
- прочитать файл построчно;
- непустые строки добавить в список;
- удалить из каждой строки все цифры, знаки препинания, скобки, кавычки и т.д. (остаются латинские буквы и пробелы);
- объединить все строки из списка в одну, используя метод join и пробел, как разделитель;
- создать словарь вида {“слово”: количество, “слово”: количество, … } для подсчета количества разных слов,
  где ключом будет уникальное слово, а значением - количество;
- вывести в порядке убывания 10 наиболее популярных слов, используя форматирование
  (вывод примерно следующего вида: “ 1 place --- sun --- 15 times \n....”);
- заменить все эти слова в строке на слово “PYTHON”;
- создать новый txt-файл;
- записать строку в файл, разбивая на строки, при этом на каждой строке записывать не более 100 символов
  при этом не делить слова.
"""

import string
def wiki_function():
    file_name = "task_B410_1.txt"
    # Название файла, с которым будет работать функция
    with open(file_name, "r") as f:
        lines = f.readlines()
    # Открытие файла с именем file_name для чтения и чтение его содержимого в список lines

    words = []
    # Пустой список для хранения слов
    for line in lines:
        # Цикл for, проходящий по каждой строке в списке lines
        if line.strip():
            # Условие проверяет, является ли строка непустой
            line = line.translate(str.maketrans('', '', string.digits+string.punctuation))
            # Удаление цифр и знаков пунктуации из строки
            words += line.lower().split()
            # Преобразование строки в нижний регистр и разделение ее на слова, которые добавляются в список words

    word_count = {}
    # Пустой словарь для подсчета количества слов
    for word in words:
        # Цикл for, проходящий по каждому слову в списке words
        if word not in word_count:
            # Условие проверяет, содержится ли слово в словаре word_count
            word_count[word] = 1
            # Если слова нет в словаре, добавляем его и устанавливаем значение 1
        else:
            word_count[word] += 1
            # Если слово уже есть в словаре, увеличиваем его значение на 1

    sorted_word_count = sorted(word_count.items(), key=lambda x: x[1], reverse=True)
    # Сортировка словаря word_count по значению в порядке убывания и сохранение отсортированного списка в sorted_word_count
    for i, (word, count) in enumerate(sorted_word_count[:10], start=1):
        # Цикл for, проходящий по первым 10 элементам отсортированного списка
        print(f"{i} place --- {word} --- {count} times")
        # Вывод места слова, слова и количество его повторений в тексте

    popular_words = [word for word, _ in sorted_word_count[:10]]
    # Создание списка популярных слов, содержащего только слова входящие а топ 10 по количеству повторений
    new_text = ' '.join(["PYTHON" if word in popular_words else word for word in words])
    # Создание нового текста, заменяющего популярные слова на "PYTHON", если они встречаются в списке popular_words

    with open("task_B410_2.txt", "w") as f:
        # Открытие файла "task_B410_2.txt" для записи
        start_index = 0
        while start_index < len(new_text):
            # Цикл while, выполняющийся, пока start_index меньше длины нового текста
            end_index = start_index + 100
            # end_index равен start_index + 100
            if end_index >= len(new_text):
                # Условие проверяет, если конечный индекс больше или равен длине нового текста
                end_index = len(new_text)
                # Устанавливаем конечный индекс равным длине нового текста
            else:
                while new_text[end_index] != ' ':
                    # Цикл while, выполняющийся, пока символ в позиции end_index в новом тексте не равен пробелу
                    end_index -= 1
                    # Уменьшаем конечный индекс на 1

            f.write(new_text[start_index:end_index].strip()+'\n')
            # Запись сегмента нового текста (от start_index до end_index)
            # в файл с переходом на новую строку и удалением лишних пробелов
            start_index = end_index
            # Обновляем начальный индекс на конечный индекс для следующей итерации цикла



# Вызов функции
wiki_function()