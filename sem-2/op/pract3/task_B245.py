# Написать функцию pos_average, которая получает спсиок строк и подсчитывает 
# процент совпадающих в одинаковых позициях символов. 
# Процент округлить до целых значений.
#
# Примеры:
# pos_average(["6900690040", "4690606946", "9990494604"]) ==> 27 
# s1 = "6900690040" 
# s2 = "4690606946" 
# s3 = "9990494604" 
# У s1 и s2 совпадает 3 цифры из 10 (индексы: 3, 4, 8) 
# У s1 и s3 совпадает 3 цифры из 10 (индексы: 1, 3, 5)
# У s3 и s2 совпадает 2 цифры из 10 (индексы: 2, 3) Соответвенно процент совпадений: 8/30 * 100 = 27


import traceback


def pos_average(s):
    m, res = 0, 0
    # Инициализация переменных m и res, которые будут использоваться для подсчета позиционной схожести
    for i in range(len(s) - 1):
        # Цикл for, проходящий по индексам списка s (за исключением последнего индекса)
        m += len(s[i]) * (len(s) - i - 1)
        # Добавляем к m значение, равное длине элемента по индексу i, умноженное на разницу между общей длиной s и текущим индексом i
        for j in range(i + 1, len(s)):
            # Вложенный цикл for, проходящий по индексам списка s начиная с i + 1
            res += sum([s[i][k] == s[j][k] for k in range(len(s[i]))])
            # Добавляем к res количество совпадающих символов между элементами по индексам i и j
    return round(res * 100 / m)
    # Возвращаем результат, округленный до целого числа, равного отношению res к m, умноженному на 100



# Тесты
try:
    assert pos_average(["6900690040", "4690606946", "9990494604"]) == 27 
    assert pos_average(["466960", "069060", "494940", "060069", "060090", "640009", "496464", "606900", "004000", "944096"]) == 27
    assert pos_average(["444996", "699990", "666690", "096904", "600644", "640646", "606469", "409694", "666094", "606490"]) == 29
except AssertionError:
    print("TEST ERROR")
    traceback.print_exc()
else:
    print("TEST PASSED")
